GET /_cluster/health => _cluster is API and /health is command.

GET /_cat/nodes?v => get all data related to cluster nodes

GET /_cat/indices?v => get info about indices

1) Sharding is a way of splitting the index into multiple part (like a partitioning but not logical)
2) Sharding increases number of documents an index can store.
3) Sharding may improve query throughput
4) Replication is configured at the index level


====================================================================================================

Adding and removing shards

1)	DELETE /pages (/pages) is an index
2)  PUT /products (/products) is an index
	{
		"settings":	{
		"number_of_shards": 2,
		"number_of_replicas": 2
		}	
	}



====================================================================================================

Lecture 22:

1) Adding a document into the index or Indexing a document.
	A) This generates automatic ID
	- POST /products/_doc
			{
			  "name": "Coffee Maker advanced",
			  "Price": 65,
			  "in_stock": 1
			}

	B) This will create manual index

	- PUT /products/_doc/100
			{
			  "name": "Toaster",
			  "Price": 49,
			  "in_stock": 4
			}

====================================================================================================

Lecture 23:

1) Retrieving the documents by ID

	- GET /products/_doc/eQp9U3cBpNpVBHpfnJWT
	- GET /products/_doc/100

====================================================================================================

Lecture 24:

1) Updating documents

-  POST /products/_update/100
{
	"doc": {
	"in_stock": 3
	}
}

2) Adding new fields into document while updating works the same way.

-  POST /products/_update/100
{
	"doc": {
	"tags": ["Electronics"]
	}
}

* Elasticsearch docs are immutable!
* When updates happens it just replaces the old doc with new
* if updated value is same as old one, ES will not update it.


====================================================================================================

Lecture 25:

1) Scripted updates

- Scripted updates are great way to reduce update api calls.
  for example we need to reduce the current value of a field without knowing its current value (Without doing GET)

- Scripted updates are like writing a script while sending a request.

* Reducing by 1
 POST /products/_update/100
 {
 	"script": {
 		"source": "ctx._source.in_stock--"
 	}
 }

* Reassign it with 10
 POST /products/_update/100
 {
 	"script": {
 		"source": "ctx._source.in_stock = 10"
 	}
 }

 * passing parameters in a script to make it more dynamic

 POST /products/_update/100
 {
 	"script": {
 		"source": "ctx._source.in_stock -= params.quantity"
 		"params": {
 			"quantity": 4
 		}
 	}
 }


 * If new value is similar to old one, unlike of simple updates, scripted updates  will always change the values

 POST /products/_update/100
 {
 	"script": {
 		"source": """
 			if (ctx._source.in_stock == 0){
 			ctx.op = 'noop';
 			}

 			ctx._source.in_stock--
 			"""

 	}
 }

 ctx is an variable, _source is a key/json object in json where values are stored


====================================================================================================

Lecture 26:

1) Upserts

Description: This is one way of updating the documents. lets say if document does not exist and you want to update it then upserts will index the document firsthand and then update it.



 POST /products/_update/101
 {
 	"script": {
 		"source": "ctx._source.in_stock++"
 	},
 	"upsert": {
 		"name": "Blender",
 		"price": 399,
 		"in_stock": 5
 	}
 }


====================================================================================================

Lecture 28:

1) Delete a document

DELETE /products/_doc/101


====================================================================================================

Lecture 29:

Understanding routing.

1) shard_num = hash(_routing) % num_primary_shards


====================================================================================================

Lecture 30:

How ES Reads data.

1) A read request is received and handled by co-ordinating node.
2) Routing is used to resolve the docs replication group
3) ARS is used to send the query to best available shard.
4) ARS = Adaptive Replica Selection
5) ARS helps to reduce query response time
6) ARS is essentially an intelligent load balancer.
7) Co-ordination node collects the response and sends it to the client


====================================================================================================

Lecture 31:

How ES Writes data.

1) Primaryt term :- this takes count of how many times the primary node has changed.
2) Sequence number :- this is a counter that increasews after every write operation.
3) Global and local checkpoints :- 
	A) Each replication group has a global checkpoint.
	B) Each shard has a local checkpoint.



====================================================================================================

Lecture 32:

Understanding the document versioning.

1) ES will not store deleted or previous docs
2) There are 2 types of versoning. Internal versioning and external versioning.


====================================================================================================

Lecture 34:

Update by query:

1) Update by can be used to update multiple documents at once just like update claise from sql.

POST /products/_update_by_query
{
	"script": {
		"source": "ctx._source.in_stock--"
	},
	"query": {
		"match_all": {}
	}
}


====================================================================================================

Lecture 35:

Delete by query:

1) Delete by can be used to delete multiple documents at once.

POST /products/_delete_by_query
{
	"query": {
		"match_all": {}
	}
}


====================================================================================================

Lecture 36:

Batch processing

==> BULK API <==
1) NDJSON format is needed
2) It modifies documents in a bulk.


POST /_bulk
{"index": {"_index": "products", "id": 200} }
{"name": "Espresso Machine", "price":199, "in_stock": 5}
{"create": {"_index": "products", "id": 201} }
{"name": "Milk Forther", "price":149, "in_stock": 14}


GET /products/_search
{
	"query": {
		"match_all": {}
	}
}


POST /products/_bulk
{"update": {"_id": 201}	}
{"_doc": {"price": 129}	}
{"delete": {"_id": 200}	}

Things to be aware of 

HTTP Content-Type header should be set as follows.
Content-Type: application/x-ndjson

Each line must end with a newline character (\n or \r\n)

failed action will not affect other actions



====================================================================================================

Lecture 42:

Understanding inverted indices.

1) Terms are mapped to the documents. not vice versa i.e. its inverted index
2) Terms = Tokens
3) 1 Inverted index per text field
4) BKD trees are used for numeric values and other data structures are used as well.


====================================================================================================

Lecture 43:

Introduction to mapping

1) Mapping is equivalent to specifying a schema in SQL.
2) There are 2 types of mappings
	A) Explicit 
	B) Dynamic


====================================================================================================

Lecture 44:

Overview of data types

1) Object data type
	Used for any JSON object
	Objects maybe nested
	Objects are not stored as objects in apache lucene, they are flattened

2) Nested data type
	Similar to Objects data type
	Useful when indexing arrays of objects

3) Keyword data type
	Used for exact matching of values
	Typically used for filtering, aggregations & sorting

4) Integer
5) boolean
6) double
7) float
8) short
9) text
10) long
11) date


====================================================================================================

Lecture 47:

Arrays

1) Arrays do not exists in ES as a datatype
2) though array values can be stored as a string
3) Arrays must be of same data type


====================================================================================================

Lecture 48:

Adding explicit mappings

PUT /reviews
{
	"mappings": {
		"properties": {
			"rating": {"type": "float"},
			"content": {"type": "text"},
			"product_id": {"type": "integer"},
			"author": {
				"properties": {
					"first_name": {"type": "text"},
					"last_name": {"type": "text"},
					"email": {"type": "keyword"}

				}
			}

		}
	}
}


====================================================================================================

Lecture 49:

Retrieving the mappings


GET /reviews/_mapping
GET /reviews/_mapping/field/content
GET /reviews/_mapping/field/author.email

reviews is an index name
content is a field name


====================================================================================================

Lecture 50:

Using dot notation in field names

using dot operator can be used as an alternative to defining object mapping

PUT /reviews_dot_notation
{
	"mappings": {
		"properties": {
			"rating": {"type": "float"},
			"content": {"type": "text"},
			"product_id": {"type": "integer"},
			"author.first_name": {"type": "float"},
			"author.last_name": {"type": "float"},
			"author.email": {"type": "float"}
			}

		}
}

using dot operator can be used in search queries too.


====================================================================================================

Lecture 51:

Adding mappings to existing indices

PUT /reviews/_mapping
{
	"properties": {
		"created_at": {
			"type" : "date"
		}
	}
}


====================================================================================================

Lecture 52:

How dates work in elastic search

Dates can be specified in one of the 3 ways

	1) Specially formatted strings
	2) Milliseconds since the epoch (long)
	3) Seconds since the epoch (integer)
	* epoch refres to the 1st jan 1970

====================================================================================================

Lecture 53:

Handing Missing fields

All fields in index are optional
Adding a field mapping does not make a field required


====================================================================================================

Lecture 54:

Overview of mapping parameters.

1) Format parameter
	A) Used to customize the format for date fields.
	B) "strict_date_optional_time || epoch_millis"
		example:
		PUT /sales
		{
			"mappings": {
				"properties": {
					"purchased_at": {
						"type": "date",
						"format": "dd/MM/yyyy"
					}
				}
			}
		}

2) Properties parameter

3) coerce parameter (conversion of fields from float to string etc)
		example:
		PUT /sales
		{
			"mappings": {
				"properties": {
					"amount": {
						"type": "float",
						"coerce": false
					}
				}
			}
		}

4) doc_values - another data structure used by the apache lucene

	A] quite useful for doing some aggregations
	B] Searching fields within the documents
	C} disable it to save disk space.
	D} Only disable it if you won't use aggregations, sorting or scripting
	E] Can not be changed without reindexing documents into new index

5) norms parameter
	
	A] This can be used to score the results based on the relevance
	B] For example google results on page 5 are not accurate
	C] This can be disabled when we want to save the disk space
			example:
		PUT /sales
		{
			"mappings": {
				"properties": {
					"tags": {
						"type": "text",
						"norms": false
					}
				}
			}
		}


6) index parameter

	A] this parameter if disabled then that field can not be used for the search query
	B] Saves disk space

7) null_value parameter

8) copy_to parameter


====================================================================================================

Lecture 55:

Updating existing mappings

1) Suppose that product ID may now include letters as well not only numbers.
2) We need to update its data type from text to keyword now.
3) Generally elastic search mappings can not be updated.
4) We can add new mappings and thats about it.
5) A few mappings params can be updated for existing mappings.


====================================================================================================

Lecture 56:

Reindexing the documents with reindex API.

Reindex API does the Heavy lifting for reindexing the documents.

Example:
POST /_reindex
{
	"source": {
		"index": "source_index"
	},

	"dest": {
		"index": "destination_index"
	}
}

Example 2:
Reindex only positive reviews.

POST /_reindex
{
	"source": {
	"index": "source_index"
	"query": {
		"range": {
			"rating": {
				"gte": 4.0
			}
		}
	}
	},

	"dest": {
		"index": "destination_index"
	}
}

Example 3: Reindex only selected fields
POST /_reindex
{
	"source": {
		"index": "source_index"
		"_source": ["content", "created_at", "rating"]
	},

	"dest": {
		"index": "destination_index"
	}
}


====================================================================================================

Lecture 57:

Introduction to field aliases
Comment is an alias of content

PUT /reviews/_mapping
{
	"properties": {
		"comment": {
			"type": "alias",
			"path": "content"
		}
	}
}


====================================================================================================

Lecture 58:

Multi field mappings

PUT /multi_filed_test
{
	"mappings": {
		"properties": {
			"description": {
				"type": "text"
			},
			"ingredients": {
				"type": "text",
				"fields": {
					"keyword": {
						"type": "keyword"
					}
				}
			}
		}
	}
}