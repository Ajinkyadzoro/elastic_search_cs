GET /_cluster/health => _cluster is API and /health is command.

GET /_cat/nodes?v => get all data related to cluster nodes

GET /_cat/indices?v => get info about indices

1) Sharding is a way of splitting the index into multiple part (like a partitioning but not logical)
2) Sharding increases number of documents an index can store.
3) Sharding may improve query throughput
4) Replication is configured at the index level


====================================================================================================

Adding and removing shards

1)	DELETE /pages (/pages) is an index
2)  PUT /products (/products) is an index
	{
		"settings":	{
		"number_of_shards": 2,
		"number_of_replicas": 2
		}	
	}



====================================================================================================

Lecture 22:

1) Adding a document into the index or Indexing a document.
	A) This generates automatic ID
	- POST /products/_doc
			{
			  "name": "Coffee Maker advanced",
			  "Price": 65,
			  "in_stock": 1
			}

	B) This will create manual index

	- PUT /products/_doc/100
			{
			  "name": "Toaster",
			  "Price": 49,
			  "in_stock": 4
			}

====================================================================================================

Lecture 23:

1) Retrieving the documents by ID

	- GET /products/_doc/eQp9U3cBpNpVBHpfnJWT
	- GET /products/_doc/100

====================================================================================================

Lecture 24:

1) Updating documents

-  POST /products/_update/100
{
	"doc": {
	"in_stock": 3
	}
}

2) Adding new fields into document while updating works the same way.

-  POST /products/_update/100
{
	"doc": {
	"tags": ["Electronics"]
	}
}

* Elasticsearch docs are immutable!
* When updates happens it just replaces the old doc with new
* if updated value is same as old one, ES will not update it.


====================================================================================================

Lecture 25:

1) Scripted updates

- Scripted updates are great way to reduce update api calls.
  for example we need to reduce the current value of a field without knowing its current value (Without doing GET)

- Scripted updates are like writing a script while sending a request.

* Reducing by 1
 POST /products/_update/100
 {
 	"script": {
 		"source": "ctx._source.in_stock--"
 	}
 }

* Reassign it with 10
 POST /products/_update/100
 {
 	"script": {
 		"source": "ctx._source.in_stock = 10"
 	}
 }

 * passing parameters in a script to make it more dynamic

 POST /products/_update/100
 {
 	"script": {
 		"source": "ctx._source.in_stock -= params.quantity"
 		"params": {
 			"quantity": 4
 		}
 	}
 }


 * If new value is similar to old one, unlike of simple updates, scripted updates  will always change the values

 POST /products/_update/100
 {
 	"script": {
 		"source": """
 			if (ctx._source.in_stock == 0){
 			ctx.op = 'noop';
 			}

 			ctx._source.in_stock--
 			"""

 	}
 }

 ctx is an variable, _source is a key/json object in json where values are stored


====================================================================================================

Lecture 26:

1) Upserts

Description: This is one way of updating the documents. lets say if document does not exist and you want to update it then upserts will index the document firsthand and then update it.



 POST /products/_update/101
 {
 	"script": {
 		"source": "ctx._source.in_stock++"
 	},
 	"upsert": {
 		"name": "Blender",
 		"price": 399,
 		"in_stock": 5
 	}
 }


====================================================================================================

Lecture 28:

1) Delete a document

DELETE /products/_doc/101


====================================================================================================

Lecture 29:

Understanding routing.

1) shard_num = hash(_routing) % num_primary_shards


====================================================================================================

Lecture 30:

How ES Reads data.

1) A read request is received and handled by co-ordinating node.
2) Routing is used to resolve the docs replication group
3) ARS is used to send the query to best available shard.
4) ARS = Adaptive Replica Selection
5) ARS helps to reduce query response time
6) ARS is essentially an intelligent load balancer.
7) Co-ordination node collects the response and sends it to the client


====================================================================================================

Lecture 31:

How ES Writes data.

1) Primaryt term :- this takes count of how many times the primary node has changed.
2) Sequence number :- this is a counter that increasews after every write operation.
3) Global and local checkpoints :- 
	A) Each replication group has a global checkpoint.
	B) Each shard has a local checkpoint.



====================================================================================================

Lecture 32:

Understanding the document versioning.

1) ES will not store deleted or previous docs
2) There are 2 types of versoning. Internal versioning and external versioning.


====================================================================================================

Lecture 34:

Update by query:

1) Update by can be used to update multiple documents at once just like update claise from sql.

POST /products/_update_by_query
{
	"script": {
		"source": "ctx._source.in_stock--"
	},
	"query": {
		"match_all": {}
	}
}


====================================================================================================

Lecture 35:

Delete by query:

1) Delete by can be used to delete multiple documents at once.

POST /products/_delete_by_query
{
	"query": {
		"match_all": {}
	}
}


====================================================================================================

Lecture 36:

Batch processing

==> BULK API <==
1) NDJSON format is needed
2) It modifies documents in a bulk.


POST /_bulk
{"index": {"_index": "products", "id": 200} }
{"name": "Espresso Machine", "price":199, "in_stock": 5}
{"create": {"_index": "products", "id": 201} }
{"name": "Milk Forther", "price":149, "in_stock": 14}


GET /products/_search
{
	"query": {
		"match_all": {}
	}
}


POST /products/_bulk
{"update": {"_id": 201}	}
{"_doc": {"price": 129}	}
{"delete": {"_id": 200}	}













